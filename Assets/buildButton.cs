using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;

public class buildButton : MonoBehaviour 
{ 
    Button button;
    //The preview model generated in the scene.
    GameObject previewInstance;
    //The building gameobject to be generated by this button.
    GameObject instance;
    //The prefab for the preview instance. specify a preview prefab in the inspector.
    public GameObject previewPrefab;
    //The prefab for the building instance. specify a building prefab in the inspector.
    public GameObject prefab;

    private void Start()
    {
        button = GetComponent<Button>();
        button.onClick.AddListener(createPreview);
    }

    /// <summary>
    /// Instantiate the preview prefab. Do nothing if preview prefab is null,
    /// </summary>
    void  createPreview()
    {
        if (!previewPrefab)
        {
            Debug.LogError(GetType().Name + " :preview not loaded!");
            return;
        }
        previewInstance = Instantiate(previewPrefab, GridUtils.ScreenToGridPlane(), Quaternion.identity);
    }

    /// <summary>
    /// destroy preview instance and set null.
    /// </summary>
    void destroyPreview()
    {
        Destroy(previewInstance);
        previewInstance = null;
    }

    private void Update()
    {
        //Make the preview model follow the mouse.
        if (previewInstance)
        {
            Vector3 worldPosition= GridUtils.ScreenToGridPlane();
            int x, z;
            GridSystem.current.getXZ(worldPosition, out x, out z);
            previewInstance.transform.position = GridSystem.current.getWorldPosition(x,z);
        }

        //Rotate the preview model.
        if (Input.GetMouseButtonDown(1))
        {
            if (previewInstance)
            {
                previewInstance.GetComponent<IBuilding>().rotate();
            }
        }

        // if it is in the preview mode, replace the preview model with the real building at the mouse position.
        if (Input.GetMouseButtonDown(0))
        {
            if (previewInstance)
            {
                Vector3 position = GridUtils.ScreenToGridPlane();
                int x, z;
                GridSystem.current.getXZ(position, out x, out z);
                Building building = prefab.GetComponent<Building>();

                //TODO: add width and height to the boundary check;
                bool boundaryCheck = GridSystem.current.checkWorldPosition(position);
                bool occupationCheck = GridSystem.current.checkOccupation(x, z, building.Size.x, building.Size.y);
                
                if (boundaryCheck&&occupationCheck)
                {
                    instance = Instantiate(prefab, previewInstance.transform.position, Quaternion.identity);
                    IPlaceableObj placeableObj = instance.GetComponent<IPlaceableObj>();
                    instance.GetComponent<IPlaceableObj>().placeAt(previewInstance.transform.position);
                    switch (previewInstance.GetComponent<IBuilding>().CurrentDir)
                    {
                        case IBuilding.dir.backward:
                            break;
                        case IBuilding.dir.right:
                            instance.GetComponent<IBuilding>().rotate();
                            break;
                        case IBuilding.dir.forward:
                            instance.GetComponent<IBuilding>().rotate();
                            instance.GetComponent<IBuilding>().rotate();
                            break;
                        case IBuilding.dir.left:
                            instance.GetComponent<IBuilding>().rotate();
                            instance.GetComponent<IBuilding>().rotate();
                            instance.GetComponent<IBuilding>().rotate();
                            break;
                    }
                    destroyPreview();
                }
            }
        }

    }
}
